{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAeC,SAASC,cAAc,aACtCC,EAAkBF,SAASC,cAAc,uBACzCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAE3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAGPR,EAAae,iBAAiB,UAC9B,SAAuBC,GACrBA,EAAMC,iBACN,IAAIC,EAAQC,OAAOhB,EAAgBiB,OAC/BC,EAAYF,OAAOf,EAAUgB,OAC7BE,EAAcH,OAAOd,EAAYe,OAErCF,GAAgBG,EAChBrB,EAAauB,QACb,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAaE,GAAK,EAGpClB,EAFWkB,EAAI,EACfN,GAASG,GAENI,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBmB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGjDuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst promisesForm = document.querySelector('form.form');\nconst firstDelayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\npromisesForm.addEventListener('submit', selectNumbers);\nfunction selectNumbers(event) {\n  event.preventDefault();\n  let delay = Number(firstDelayInput.value);\n  let delayStep = Number(stepInput.value);\n  let amountValue = Number(amountInput.value);\n  let position = 0;\n  delay = delay - delayStep;\n  promisesForm.reset();\n  for (let i = 0; i < amountValue; i += 1) {\n    position = i + 1;\n    delay += delayStep;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$promisesForm","document","querySelector","$ce04d3a99e08e73b$var$firstDelayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","Number","value","delayStep","amountValue","reset","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.2c061093.js.map"}